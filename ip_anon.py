import re
import ipaddress

def list_iter(a_list):
    '''
    Generator function that takes a list as input.
    Checks if items in list can be split into 4 . separated octets and if mask is /24 or 0.0.0.0 and yields the item.
    Expand this using binary conversion to evaluate for IP MASK pairings.
    '''
    for item in a_list:
       if (len(item.split('.')) == 4) and '0.0.0.0' not in item:
           yield item

class IPAnon:
    def __init__(self, config):
        with open(config) as f:
            config_lines = f.readlines()
        self.config_lines = config_lines

    def ip_guess(self):
        possible_ips = []
        for line in self.config_lines:
            splitline = line.split()
            for item in splitline:
                if (len(item.split('.')) == 4) and '0.0.0.0' not in item:
                    possible_ips.append(item)
        self.possible_ips = possible_ips

    def ip_check(self):
        '''
        Go through list of IPs generated by ip_guess.
        List interface objects e.g: ip address 1.1.1.1 netmask 255.255.255.0
        List host addresses e.g: tcp host 1.1.1.1
        '''
        config_hosts = []
        config_networks = []
        #print self.possible_ips
        for i, address  in enumerate(self.possible_ips):
            try:
                try_address = '{}/{}'.format(address, self.possible_ips[i+1])
                print('tryng: {}'.format(try_address))
                test_add = ipaddress.IPv4Interface('{}/{}'.format(address, self.possible_ips[i+1]))
                network = test_add.network
                hosts = list(network.hosts())
                if len(hosts) == 1:
                    config_hosts.append(hosts)
                elif len(hosts) > 1:
                    config_networks.append(network)
                #networks_and_interfaces.append('')
            except ipaddress.NetmaskValueError:
                #print('{}/{} is not a network'.format(address, self.possible_ips[i+1]))
                pass
            except IndexError:
                print('End of List')
        print('networks: {}'.format(config_networks))
        print('hosts: {}'.format(config_hosts))

def main():
    #testwords = ['1.10.100.101', 'ladybirds', 'hello.word']
    with open('sample_conf.txt') as f:
        f_lines = f.readlines()
        f_split_lines = [i.split() for i in f_lines]

    #print f_split_lines
    all_ips = []
    for i in f_split_lines:
        for j in list_iter(i):
            all_ips.append(j)
    #print('{} \n IPs are: {}'.format(80 * '#', all_ips))

    test_anon_class = IPAnon('sample_conf.txt')
    #print test_anon_class.config_lines
    test_anon_class.ip_guess()
    #print test_anon_class.possible_ips
    test_anon_class.ip_check()

if __name__ == '__main__':
    main()
